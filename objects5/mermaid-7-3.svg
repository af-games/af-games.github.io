<svg xmlns="http://www.w3.org/2000/svg" viewBox="-100 -100 200 200">
```

2. **Plot Points**: Let's represent mermaids as circles with different colors for visual variety.

```xml
<!-- Mermaid points -->
<g id="mermaids">
  <circle cx="50" cy="30" r="5" fill="#87CEFA"/>
  <!-- Add more mermaids with varying coordinates and colors -->
</g>
```

3. **Draw Paths**: For coastlines, boundaries, and other paths, I'll use the `<path>` element with `d` attribute containing commands to draw lines, curves, etc.

```xml
<!-- Coastline -->
<path id="coastline" fill="none" stroke="#006400" d="
  M -80,-90 Q -50,-70 -20,-50 Q 50,-30 80,-10 Q 80,30 50,50
"/>

<!-- Boundary -->
<path id="boundary" fill="none" stroke="#FFFFFF" d="
  M -100,-100 H 100 V 100 H -100 Z
"/>
```

4. **Colors**: I'll use the following colors to represent different features:
   - Coastline: Dark green (#006400)
   - Boundary: White (#FFFFFF)
   - Mermaids: Light blue (#87CEFA) for general mermaids, darker blue (#20B2AA) for special ones.

5. **Ensure Balance**: To maintain balance in composition:
   - Limit the number of mermaid points.
   - Use a harmonious color palette with similar tones (light blues and whites).
   - Keep coastlines and boundaries simple to avoid overwhelming the map.

6. **Complete SVG**:

```xml
<svg xmlns="http://www.w3.org/2000/svg" viewBox="-100 -100 200 200">
  <!-- Boundary -->
  <path id="boundary" fill="none" stroke="#FFFFFF" d="M -100,-100 H 100 V 100 H -100 Z"/>

  <!-- Coastline -->
  <path id="coastline" fill="none" stroke="#006400" d="
    M -80,-90 Q -50,-70 -20,-50 Q 50,-30 80,-10 Q 80,30 50,50
 "/>

  <!-- Mermaid points -->
  <g id="mermaids">
    <circle cx="50" cy="30" r="5" fill="#87CEFA"/>
    <circle cx="-60" cy="-40" r="5" fill="#20B2AA"/>
    <!-- Add more mermaids with varying coordinates and colors -->
  </g>
</svg>