<svg>` element with appropriate dimensions (e.g., 800px by 600px).

```xml
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600">
```

2. **Create the background pattern**: Start at the edges by defining a repeating gradient or pattern for the background. For this example, let's use a radial gradient from light blue to dark blue.

```xml
<defs>
  <linearGradient id="gradient" x1="0%" y1="0%" x2="0%" y2="100%">
    <stop offset="0%" style="stop-color:lightblue;stop-opacity:1"/>
    <stop offset="100%" style="stop-color:darkblue;stop-opacity:1"/>
  </linearGradient>
</defs>

<rect width="800" height="600" fill="url(#gradient)"/>
```

3. **Sketch the mermaid outline**: Using `<path>` elements with BÃ©zier curves, draw the basic shape of the mermaid's body, tail, and hair. Start from one edge, typically the top-left corner.

```xml
<path d="M10 10 C40 20, 70 30, 100 60 Q250 80, 350 150 C450 200, 550 250, 650 300" stroke="black"/>
```

4. **Build intricate details in the center**: Fill the mermaid's body with interconnected patterns using `<polygon>`, `<path>`, and `<circle>` elements. Gradually move towards the center of the canvas.

- For the mermaid's scales, create a repeating pattern of hexagons filled with different shades of blue-green.

```xml
<defs>
  <pattern id="scales" width="10" height="20">
    <polygon points="5,0 10,5 5,10 0,5" fill="#88d8ca"/>
    <polygon points="5,0 10,5 5,10 0,5" fill="#48b6ac" transform="translate(5,10) rotate(60)"/>
  </pattern>
</defs>

<path d="M200 300 Q270 320, 320 350 T370 400" fill="url(#scales)" stroke="black"/>
```

- Add details like eyes, mouth, and other features using `<circle>` and `<path>` elements.

```xml
<circle cx="280" cy="300" r="10" fill="#fff"/>
<circle cx="320" cy="300" r="10" fill="#fff"/>

<path d="M295 330 Q305 340, 315 350" stroke="black" fill="transparent"/>
```

5. **Ensure harmony throughout the design**: Maintain balance by repeating patterns, using consistent colors and line widths, and gradually introducing intricate details as you move towards the center.

6. **Create the mermaid's tail and hair**: Continue adding interconnected patterns and lines to complete the mermaid's tail and hair, ensuring they blend harmoniously with the body.

7. **Translate the tapestry into an SVG file**:

- Save the completed XML code in a file with a `.svg` extension (e.g., `mermaid_tapestry.svg`).

Here's the final SVG code for the mermaid tapestry:

```xml
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="600">
  <defs>
    <linearGradient id="gradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:lightblue;stop-opacity:1"/>
      <stop offset="100%" style="stop-color:darkblue;stop-opacity:1"/>
    </linearGradient>

    <pattern id="scales" width="10" height="20">
      <polygon points="5,0 10,5 5,10 0,5" fill="#88d8ca"/>
      <polygon points="5,0 10,5 5,10 0,5" fill="#48b6ac" transform="translate(5,10) rotate(60)"/>
    </pattern>
  </defs>

  <rect width="800" height="600" fill="url(#gradient)"/>

  <path d="M10 10 C40 20, 70 30, 100 60 Q250 80, 350 150 C450 200, 550 250, 650 300" stroke="black"/>

  <path d="M200 300 Q270 320, 320 350 T370 400" fill="url(#scales)" stroke="black"/>

  <circle cx="280" cy="300" r="10" fill="#fff"/>
  <circle cx="320" cy="300" r="10" fill="#fff"/>

  <path d="M295 330 Q305 340, 315 350" stroke="black" fill="transparent"/>
</svg>