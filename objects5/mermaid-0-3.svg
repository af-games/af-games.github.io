<svg xmlns="http://www.w3.org/2000/svg" viewBox="-150 -150 300 300">
  <defs>
    <!-- Colors -->
    <linearGradient id="gradient-sea" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:blue;stop-opacity:.8"/>
      <stop offset="100%" style="stop-color:#3897e6"/>
    </linearGradient>
    <linearGradient id="gradient-land" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:green;stop-opacity:.8"/>
      <stop offset="100%" style="stop-color:#8db6cc"/>
    </linearGradient>
    <!-- Fonts -->
    <font-face url="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" />
    <font-face font-family="Roboto" font-style="normal"></font-face>
  </defs>
```

Now, let's define some features and plot points:

1. **Sea**: I'll use a smooth gradient from blue to light blue for the sea.

```xml
<path d="M-150 -150 Q0,-120 75,-90 Q150,-60 150,30 Q120,105 75,120 Q0,145 -150,120" fill="url(#gradient-sea)" />
```

2. **Land**: For land, I'll use a green-to-light-green gradient and plot points using quadratic BÃ©zier curves (Q) for a more organic feel.

```xml
<path d="M-150 -150 Q-75,-90 0,-60 Q75,-30 150,0 Q120,45 75,90 Q0,135 -75,150 Q-150,120 -150,90" fill="url(#gradient-land)" />
```

3. **Islands**: Small land features will be represented as circles with a green fill.

```xml
<circle cx="60" cy="-45" r="15" fill="green" />
<circle cx="120" cy="-30" r="10" fill="green" />
```

4. **Mermaid territory**: This will be represented by a coral-like structure using SVG paths and filled with a purple gradient.

```xml
<!-- Gradient for mermaid territory -->
<linearGradient id="gradient-mermaid" x1="0%" y1="0%" x2="100%" y2="100%">
  <stop offset="0%" style="stop-color:purple;stop-opacity:.8"/>
  <stop offset="100%" style="stop-color:#a956c9"/>
</linearGradient>

<!-- Mermaid territory -->
<path d="M75,-90 Q60,-75 45,-60 Q30,-45 15,-30 Q-15,-15 -30,-30 Q-45,-45 -60,-60 Q-75,-75 -90,-90" fill="url(#gradient-mermaid)" />
```

To ensure balance in the composition, I'll maintain a consistent scale for all features and avoid overcrowding by limiting the number of islands and other details. Additionally, I'll use clear separation between sea, land, and mermaid territory to create visual hierarchy.

Lastly, let's add some text labels using the defined fonts:

```xml
<text font-family="Roboto" font-size="12" fill="black" x="-140" y="-155">Sea</text>
<text font-family="Roboto" font-size="12" fill="black" x="-95" y="-130">Land</text>
<text font-family="Roboto" font-weight="bold" font-size="16" fill="white" x="70" y="-85">Mermaid Territory</text>
```

Combining all these elements, you'll get an SVG map of the uncharted territories of mermaid. Here's the complete SVG code:

```xml
<svg xmlns="http://www.w3.org/2000/svg" viewBox="-150 -150 300 300">
  <defs>
    <!-- Colors -->
    <linearGradient id="gradient-sea" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:blue;stop-opacity:.8"/>
      <stop offset="100%" style="stop-color:#3897e6"/>
    </linearGradient>
    <linearGradient id="gradient-land" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:green;stop-opacity:.8"/>
      <stop offset="100%" style="stop-color:#8db6cc"/>
    </linearGradient>
    <!-- Gradient for mermaid territory -->
    <linearGradient id="gradient-mermaid" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:purple;stop-opacity:.8"/>
      <stop offset="100%" style="stop-color:#a956c9"/>
    </linearGradient>
    <!-- Fonts -->
    <font-face url="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" />
    <font-face font-family="Roboto" font-style="normal"></font-face>
  </defs>

  <!-- Sea -->
  <path d="M-150 -150 Q0,-120 75,-90 Q150,-60 150,30 Q120,105 75,120 Q0,145 -150,120" fill="url(#gradient-sea)" />

  <!-- Land -->
  <path d="M-150 -150 Q-75,-90 0,-60 Q75,-30 150,0 Q120,45 75,90 Q0,135 -75,150 Q-150,120 -150,90" fill="url(#gradient-land)" />

  <!-- Islands -->
  <circle cx="60" cy="-45" r="15" fill="green" />
  <circle cx="120" cy="-30" r="10" fill="green" />

  <!-- Mermaid territory -->
  <path d="M75,-90 Q60,-75 45,-60 Q30,-45 15,-30 Q-15,-15 -30,-30 Q-45,-45 -60,-60 Q-75,-75 -90,-90" fill="url(#gradient-mermaid)" />

  <!-- Text labels -->
  <text font-family="Roboto" font-size="12" fill="black" x="-140" y="-155">Sea</text>
  <text font-family="Roboto" font-size="12" fill="black" x="-95" y="-130">Land</text>
  <text font-family="Roboto" font-weight="bold" font-size="16" fill="white" x="70" y="-85">Mermaid Territory</text>
</svg>